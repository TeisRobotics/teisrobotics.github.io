<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TeisRobotics</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://teisrobotics.github.io/"/>
  <updated>2020-02-14T11:10:52.936Z</updated>
  <id>https://teisrobotics.github.io/</id>
  
  <author>
    <name>Teis Robotics</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Comunicando Lazarus con Arduino (1)</title>
    <link href="https://teisrobotics.github.io/2020/02/14/lazarusarduino/"/>
    <id>https://teisrobotics.github.io/2020/02/14/lazarusarduino/</id>
    <published>2020-02-14T11:10:52.000Z</published>
    <updated>2020-02-14T11:10:52.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Comunicando-Lazarus-con-Arduino-1"><a href="#Comunicando-Lazarus-con-Arduino-1" class="headerlink" title="Comunicando Lazarus con Arduino (1)"></a>Comunicando Lazarus con Arduino (1)</h2><p><a href="https://www.arduino.cc/" target="_blank" rel="noopener">Arduino</a> es un plataforma de hardware libre, quizás la más conocida dentro del movimiento maker. En otras palabras es un pequeño microprocesador que registra entradas y salidas, entre otras funcionalidades.</p><p>Además permite comunicarse con un PC por medio de su puerto serie.</p><p>Lazarus dispone de la capacidad de gestionar puertos serie de una manera sencilla.</p><a id="more"></a><h2 id="Preparando-el-entorno"><a href="#Preparando-el-entorno" class="headerlink" title="Preparando el entorno"></a>Preparando el entorno</h2><p>Para hacer uso del puerto serie en lazarus necesitamos añadir un libreria, o componente. Para ello desde el menú <code>Paquete</code> seleccionamos <code>Administrador de paquetes en línea</code>.</p> <center><img src="/imagenes/lazarus7-2.png" class="" title="Administrador paquetes"></center><p>Por supuesto tienes que tener conexión a internet. En la ventana que se abre, buscamos <code>serial</code> para que filtre todos los componentes que se llamane así.</p> <center><img src="/imagenes/lazarus7-3.png" class="" title="Instalar serial"></center><p>Pulsamos sobre instalar. Para que el componente esté disponible es necesario compilarlo e instalarlo. Para ello es necesario reconstruir lazarus.</p> <center><img src="/imagenes/lazarus7-5.png" class="" title="Instalar serial"></center><p>Si todo fue bien, Lazarus se cerrará y se volverá a abrir. Y ya tendremos nuestro componente listo para usar. En este caso se instaló en la paleta <code>LazSerial</code>.</p> <center><img src="/imagenes/lazarus7-6.png" class="" title="LazSerial"></center><h2 id="Creando-la-aplicacion"><a href="#Creando-la-aplicacion" class="headerlink" title="Creando la aplicación"></a>Creando la aplicación</h2><p>Para comunicar con nuestro arduino, vamos a poner una serie de componentes. Creamos una aplicación nueva. Añade un componente <code>TPanel</code>, y alínealo a la parte de arriba y borra el texto de su propiedad <code>Caption</code>.</p><p>Añade dos botones sobre el componente <code>TPanel</code>. Uno será para conectar y otro para configurar el puerto serie.</p><p>Añade un componente TMemo, pon su propiedad <code>ScrollBars</code> con el valor <code>ssAuthoBoth</code>  y alínealo al cliente.</p><p>Y no te olvides de añadir el componente <code>LazSerial</code>. La aplicación debería quedar algo así:</p> <center><img src="/imagenes/lazarus7-7.png" class="" title="Aplicación LazSerial"></center><p>La comunicación serie, se realiza por medio un puerto, y a una velocidad determinada. Esta información debe coincidir con el el nombre el puerto serie al que está conectado nuestro arduino y con la velocidad que hemos programado en nuestro arduino.</p><p>Luis Llamas tiene en su blog un excelente <a href="https://www.luisllamas.es/arduino-puerto-serie/" target="_blank" rel="noopener">artículo</a> sobre la comunicación serie en arduino.</p><p>Para indicar a nuestro componente <code>Lazserial</code> como se debe comunicar, usaremos el evento Onclick del botón de configurar. Cuando se ejecute este evento, ejecutaremos el siguiente código:</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TLazSerialFrm</span>.<span class="title">btConfigurarClick</span><span class="params">(Sender: TObject)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  LazSerial1.ShowSetupDialog;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>Ahora en el evento <code>OnClick</code> del botón conectar escribiremos la orden de activación.</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TLazSerialFrm</span>.<span class="title">btConectarClick</span><span class="params">(Sender: TObject)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  LazSerial1.Active := True;</span><br><span class="line"><span class="keyword">end</span>;  </span><br></pre></td></tr></table></figure><p>Bien ahora solo queda que cuando se reciban datos, escribirlos en el componente TMemo. Para ello usaremos el evento <code>RxData</code> del componente <code>LazSerial</code>.</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TLazSerialFrm</span>.<span class="title">LazSerial1RxData</span><span class="params">(Sender: TObject)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  Memo1.Lines.Add(LazSerial1.ReadData);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>  <p>Antes de probar la aplicación, vamos a escribir un simple programa en un arduino.</p><h2 id="Programando-Arduino"><a href="#Programando-Arduino" class="headerlink" title="Programando Arduino"></a>Programando Arduino</h2><p>Escribe este programa cárgalo en tu Arduino.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> led = <span class="number">13</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line">  <span class="built_in">pinMode</span> (led,<span class="literal">OUTPUT</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">digitalWrite</span> (led,<span class="literal">HIGH</span>);</span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">println</span> (<span class="string">"ON"</span>);</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1500</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(led,<span class="literal">LOW</span>);</span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">println</span>(<span class="string">"OFF"</span>);</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <p>Este simple programa enciende el LED del Pin 13, envía por el puerto serie la palabra <code>ON</code>, espera un segundo y medio, luego apaga el LED, envía por el puerto serie la palabra <code>OFF</code>, y espera un segundo y medio.</p><h2 id="Probando-la-comunicacion"><a href="#Probando-la-comunicacion" class="headerlink" title="Probando la comunicación"></a>Probando la comunicación</h2><p>Ejecuta la aplicación que has creado en Lázarus, y pulsa sobre el botón configurar. Y selecciona el puerto serie y la velocidad. El puerto dependerá de tu PC, y la velocidad es 9600 baudios, ya que es la hemos configurado en el programa del Arduino.</p> <center><img src="/imagenes/lazarus7-8.png" class="" title="Aplicación LazSerial"></center><p>Ahora pulsa conectar y empezaras a recibirlos la información que envía Arduino.</p> <center><img src="/imagenes/lazarus7-9.png" class="" title="Aplicación LazSerial"></center><p>Con esto ya podemos recibir la información que envía Arduino por el puerto serie.</p><p>En la próxima entrada veremos como enviar información a nuestra placa Arduino.</p><p>Podeis descargar el código fuente, tanto de la aplicación de Lázarus, como la de arduino desde <a href="https://github.com/TeisRobotics/Lazarus/tree/master/Blog/lazarduino1" target="_blank" rel="noopener">aquí</a>.</p><p>Saludos</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Comunicando-Lazarus-con-Arduino-1&quot;&gt;&lt;a href=&quot;#Comunicando-Lazarus-con-Arduino-1&quot; class=&quot;headerlink&quot; title=&quot;Comunicando Lazarus con Arduino (1)&quot;&gt;&lt;/a&gt;Comunicando Lazarus con Arduino (1)&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.arduino.cc/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Arduino&lt;/a&gt; es un plataforma de hardware libre, quizás la más conocida dentro del movimiento maker. En otras palabras es un pequeño microprocesador que registra entradas y salidas, entre otras funcionalidades.&lt;/p&gt;
&lt;p&gt;Además permite comunicarse con un PC por medio de su puerto serie.&lt;/p&gt;
&lt;p&gt;Lazarus dispone de la capacidad de gestionar puertos serie de una manera sencilla.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Guias" scheme="https://teisrobotics.github.io/categories/Guias/"/>
    
    
      <category term="lazarus" scheme="https://teisrobotics.github.io/tags/lazarus/"/>
    
      <category term="programacion" scheme="https://teisrobotics.github.io/tags/programacion/"/>
    
      <category term="pascal" scheme="https://teisrobotics.github.io/tags/pascal/"/>
    
      <category term="arduino" scheme="https://teisrobotics.github.io/tags/arduino/"/>
    
  </entry>
  
  <entry>
    <title>Lazarus. Cronómetro Pomodoro</title>
    <link href="https://teisrobotics.github.io/2020/01/30/lazaruspomodoro/"/>
    <id>https://teisrobotics.github.io/2020/01/30/lazaruspomodoro/</id>
    <published>2020-01-30T11:35:26.000Z</published>
    <updated>2020-01-30T11:35:26.200Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lazarus-Cronometro-Pomodoro"><a href="#Lazarus-Cronometro-Pomodoro" class="headerlink" title="Lazarus: Cronómetro Pomodoro"></a>Lazarus: Cronómetro Pomodoro</h2> <center><img src="/imagenes/Pomodor.png" class="" title="Aplicación"></center><p>En esta entrada vamos a hacer una aplicación que nos sirva como cronómetro pomodoro. ¿Pero qué es un cronómetro pomodoro?. Según la wikipedia, <a href="https://es.wikipedia.org/wiki/T%C3%A9cnica_Pomodor" target="_blank" rel="noopener">su definición es</a>:</p><blockquote><blockquote><p>La Técnica Pomodoro es un método para mejorar la administración del tiempo dedicado a una actividad. Fue desarrollado por Francesco Cirillo a fines de la década de 1980.1​ Se usa un temporizador para dividir el tiempo en intervalos indivisibles, llamados pomodoros, de 25 minutos de actividad, seguidos de 5 minutos de descanso, con pausas más largas cada cuatro pomodoros.</p></blockquote></blockquote><a id="more"></a><h3 id="Planteando-el-problema-logico"><a href="#Planteando-el-problema-logico" class="headerlink" title="Planteando el problema lógico"></a>Planteando el problema lógico</h3><p>Nuestra aplicación funcionará de la siguiente manera.</p><ul><li>EL botón iniciará y parará el cronómetro</li><li>Al iniciar el cronómetro este contará 25 minutos. E indicará que está en modo Concentración</li><li>Al pasar los 25 minutos, el cronómetro volverá a empezar a contar desde 0 hasta 5. E indicará que está en el modo Descanso.</li><li>Al terminar el modo Descanso el cronómetro se parará.</li></ul><h3 id="Preparando-los-componentes"><a href="#Preparando-los-componentes" class="headerlink" title="Preparando los componentes"></a>Preparando los componentes</h3><p>Para realizar esta aplicación vamos a necesitar un formulario, dos botones, un etiqueta o <code>TLabel</code> y un cronómetro o <code>TTimer</code>.</p><p>Empieza una nueva aplicación, modifica las propiedades siguientes:</p><center><table><thead><tr><th>Propiedad</th><th>Valor</th></tr></thead><tbody><tr><td>BorderIcon</td><td>biMaximize = FALSE</td></tr><tr><td>BorderStyle</td><td>bsSingle</td></tr><tr><td>Caption</td><td>Cronómetro pomodoro</td></tr><tr><td>Position</td><td>poDesktopCenter</td></tr><tr><td>Name</td><td>Mainfrm</td></tr></tbody></table></center><p>La propiedad <code>BorderIcon</code>, tiene varias opciones dentro ella. Al desplegarla verás varias posibilidades. Al poner <code>biMaximize</code> a false conseguimos que el botón para maximizar la ventana desaparezca, por lo cual ya no se puede ampliar su tamaño.</p><p>La propiedad <code>BorderStyle</code>, indica el tipo de borde que queremos. Al poner el valor <code>bsSingle</code>,conseguimos que el borde sea sencillo o único, por lo cual no se puede cambiar el tamaño de la ventana.</p><p>Con la propiedad <code>Position</code>, indicamos dónde aparece la ventana, en esta caso <code>poDesktopCenter</code> indica que se muestre en el centro del escritorio.</p><p>Ahora coloca un componenten <code>TLabel</code>, lo encontrarás en la pestaña estándar.</p><p>Ajusta sus propiedades según la tabla siguiente:</p><center><table><thead><tr><th>Propiedad</th><th>Valor</th></tr></thead><tbody><tr><td>Align</td><td>alTop</td></tr><tr><td>Alignment</td><td>taCenter</td></tr><tr><td>Caption</td><td>00:00</td></tr><tr><td>Font</td><td>Size = 45</td></tr><tr><td>Position</td><td>poDesktopCenter</td></tr><tr><td>Name</td><td>lbTime</td></tr></tbody></table></center><p>Ahora coloca un botón, y ajusta sus propiedades.</p><center><table><thead><tr><th>Propiedad</th><th>Valor</th></tr></thead><tbody><tr><td>Caption</td><td>Iniciar</td></tr><tr><td>Name</td><td>btControl</td></tr></tbody></table></center><p>Ahora coloca un control <code>TTimer</code>. Lo encontrarás en la pestaña <code>System</code>.</p> <center><img src="/imagenes/lazarus6-1.png" class="" title="Ttimer"></center><p>Este control nos permite que cada cierto tiempo se produzca un evento. Su propiedad <code>Interval</code> indica, en milisegundos, cada cuento tiempo se produce el evento. Su propiedad <code>Enabled</code> nos permite activar y desactivar su funcionamiento.</p><p>Pon su propiedad <code>Enabled</code> a False. El resto déjalo como está.</p><p>Tu aplicación debería tener este aspecto.</p> <center><img src="/imagenes/lazarus6-2.png" class="" title="Aplicación"></center><h3 id="Escribiendo-el-codigo-fuente"><a href="#Escribiendo-el-codigo-fuente" class="headerlink" title="Escribiendo el código fuente"></a>Escribiendo el código fuente</h3><p>Ahora que tenemos todos los controles listos, y el planteamiento lógico de nuestra aplicación,vamos a escribir el código fuente.</p><p>Empezamos por evento <code>OnClick</code>  de botón. Aquí vamos activar y desactivar el cronómetro. Para ello lo se hace es cambiar su propiedad <code>Enabled</code>.</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TMainFrm</span>.<span class="title">btControlClick</span><span class="params">(Sender: TObject)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  Timer1.Enabled := <span class="keyword">not</span> Timer1.Enabled;</span><br><span class="line"><span class="keyword">end</span>;  </span><br></pre></td></tr></table></figure><p>Como nuestro cronómetro debe conocer en que modo está, vamos a crear una variable que lo indique. Pero esta variable debe estar disponible para su consulta o modificación desde cualquier parte de nuestro código. Para ello vamos a definir la variable al principio del código. En la sección dónde private.</p><p>Además para saber el tiempo que lleva transcurrido debemos anotar la hora a la que se iniciar el cronómetro. Esta también será una variable que debe estar disponible para todo nuestro código.</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span></span><br><span class="line">    Tiempo: TTime; <span class="comment">//Almacena el número de segundos</span></span><br><span class="line">    ModoDescanso: boolean; <span class="comment">//Almacena el estado</span></span><br></pre></td></tr></table></figure><p>Hemos definidos dos variables que son globales, eso significa que cualquier parte de nuestro código puede leer y modificar estas variables. </p><p>La variable <code>Tiempo</code> almacenará la hora a la que se iniciar el cronómetro. Y la variable <code>ModoDescanso</code> indica se está en modoDescanso o no.</p><p>Ahora vamos usar los eventos que tiene el componente TTimer.</p><ul><li><p><code>OnStartTimer</code>. Se produce cuando se inicia el cronómetro</p></li><li><p><code>OnStopTimer</code>. Se produce cuando se detiene el cronómetro.</p></li><li><p><code>OnTimer</code>. Se produce cada vez que pasa el tiempo programado en la propiedad <code>Interval</code>.</p><center><img src="/imagenes/lazarus6-3.png" class="" title="Eventos"></center></li></ul><p>En el evento <code>OnStartTime</code> pondremos el código siguiente:</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TMainFrm</span>.<span class="title">Timer1StartTimer</span><span class="params">(Sender: TObject)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  lbTime.Caption := <span class="string">'00:00'</span>;</span><br><span class="line">  MainFrm.Caption := <span class="string">'Tiempo Concentración'</span>;</span><br><span class="line">  btControl.Caption := <span class="string">'Detener'</span>;</span><br><span class="line">  Tiempo := Time;</span><br><span class="line">  ModoDescanso := False;</span><br><span class="line"><span class="keyword">end</span>; </span><br></pre></td></tr></table></figure><p>Fíjate que la variable <code>tiempo</code> es igualada a <code>Time</code>. <code>Time</code> es una función que devuelve la hora actual. Y la variable <code>ModoDescanso</code> la iniciamos a False.</p><p>Ahora vamos a ver el código del evento <code>OnStopTimer</code>.</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TMainFrm</span>.<span class="title">Timer1StopTimer</span><span class="params">(Sender: TObject)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  lbTime.Caption := <span class="string">'00:00'</span>;</span><br><span class="line">  MainFrm.Caption := <span class="string">'Cronómetro pomodoro'</span>;</span><br><span class="line">  btControl.Caption := <span class="string">'Arrancar'</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>En este parte, simplemente volvemos a poner todo como estaba al principio.</p><p>Ahora vamos a ver el código fuente del evento <code>Ontimer</code>. Que se ejecuta cada segundo o lo que es lo mismo cada 1000 milisegundos.</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TMainFrm</span>.<span class="title">Timer1Timer</span><span class="params">(Sender: TObject)</span>;</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">  Actual: TTime;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">  Actual := Time - Tiempo;</span><br><span class="line">  lbTime.Caption := FormatDateTime(<span class="string">'nn:ss'</span>, actual);</span><br><span class="line">  <span class="keyword">if</span> (ModoDescanso = False) <span class="keyword">and</span> (MinutesBetween(Time, Tiempo) = <span class="number">25</span>) <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    MainFrm.Caption := <span class="string">'Tiempo Descanso'</span>;</span><br><span class="line">    ModoDescanso := True;</span><br><span class="line">    Tiempo := Time;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">if</span> (ModoDescanso = True) <span class="keyword">and</span> (MinutesBetween(Time, Tiempo) = <span class="number">5</span>) <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    Timer1.Enabled:= False;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>Lo primero que se hacemos en calcular cuanto tiempo ha pasado, para ello restamos la hora actual (recuerda la función <code>time</code>) a la hora que se inicio el cronómetro. Y lo guardamos en la variable <code>Actual</code>. Esta variable esta definida al principio del evento. Por tanto solo se podrá usar en el evento. Es lo que se denomina una variable local.</p><p>Como la hora no es un dato cadena o texto, que el tipo de dato que muestra la etiqueta <code>lblabel</code> lo convertimos en cadena, indicando que queremos que se muestren minutos y segundos. Esto lo hace la función <code>FormatDataTime</code>.</p><p>El siguiente paso es comprobar en que modo está. Eso lo hacemos con la instrucción <code>IF</code>.  Además debemos saber cuantos minutos han pasado. El cálculo se hace con la función <code>MinutesBetween</code>. Para usar esta función debemos indicar a nuestro programa en que librería se encuentra, ya que no la incluye por defecto. Para ello en la parte superior hay un línea que empieza por la palabra reservada <code>uses</code>. Al final debes añadir la librería <code>dateutils</code>.</p> <center><img src="/imagenes/lazarus6-4.png" class="" title="Clausula uses"></center><p>Ya está listo nuestra aplicación. Se pueden realizar muchas mejoras, desde estéticas hasta funcionales. Pero el funcionamiento básico esta listo. Modificar propiedades, código, etc para adapatarla a vuestro gusto y sobre todo explorar y aprender más.</p><center><img src="/imagenes/lazarus6-5.png" class="" title="Aplicación"></center><p>El código fuente lo podeís descargar del github de TeisRobotics, desde <a href="https://github.com/TeisRobotics/Lazarus/tree/master/Blog/Pomodoro" target="_blank" rel="noopener">aquí</a>.</p><p>Saludos</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Lazarus-Cronometro-Pomodoro&quot;&gt;&lt;a href=&quot;#Lazarus-Cronometro-Pomodoro&quot; class=&quot;headerlink&quot; title=&quot;Lazarus: Cronómetro Pomodoro&quot;&gt;&lt;/a&gt;Lazarus: Cronómetro Pomodoro&lt;/h2&gt; &lt;center&gt;
&lt;img src=&quot;/imagenes/Pomodor.png&quot; class=&quot;&quot; title=&quot;Aplicación&quot;&gt;
&lt;/center&gt;

&lt;p&gt;En esta entrada vamos a hacer una aplicación que nos sirva como cronómetro pomodoro. ¿Pero qué es un cronómetro pomodoro?. Según la wikipedia, &lt;a href=&quot;https://es.wikipedia.org/wiki/T%C3%A9cnica_Pomodor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;su definición es&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;La Técnica Pomodoro es un método para mejorar la administración del tiempo dedicado a una actividad. Fue desarrollado por Francesco Cirillo a fines de la década de 1980.1​ Se usa un temporizador para dividir el tiempo en intervalos indivisibles, llamados pomodoros, de 25 minutos de actividad, seguidos de 5 minutos de descanso, con pausas más largas cada cuatro pomodoros.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Guias" scheme="https://teisrobotics.github.io/categories/Guias/"/>
    
    
      <category term="lazarus" scheme="https://teisrobotics.github.io/tags/lazarus/"/>
    
      <category term="programacion" scheme="https://teisrobotics.github.io/tags/programacion/"/>
    
      <category term="pascal" scheme="https://teisrobotics.github.io/tags/pascal/"/>
    
  </entry>
  
  <entry>
    <title>Empezando</title>
    <link href="https://teisrobotics.github.io/2020/01/10/empezando/"/>
    <id>https://teisrobotics.github.io/2020/01/10/empezando/</id>
    <published>2020-01-10T19:57:39.639Z</published>
    <updated>2019-12-24T11:19:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TEISROBOTICS"><a href="#TEISROBOTICS" class="headerlink" title="TEISROBOTICS"></a>TEISROBOTICS</h2><center><!-- ![](/wiki/imagenes/logo.png) --><img src="/imagenes/logo.png" class=""></center><ul><li><a href="https://www.youtube.com/playlist?list=PLA-c5i1JTR7_531PzKHpszD0CZuLQFwJP" target="_blank" rel="noopener">Aprendiendo markdown.</a> Lista de reproducción de youtube para aprender Markdown.</li><li><a href="https://ultibo.org" target="_blank" rel="noopener">Ultibo.</a> Página oficial de Ultibo.</li><li><a href="http://www.lazarus-ide.org/" target="_blank" rel="noopener">Lazarus.</a> Entorno de desarrollo en Free Pascal.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TEISROBOTICS&quot;&gt;&lt;a href=&quot;#TEISROBOTICS&quot; class=&quot;headerlink&quot; title=&quot;TEISROBOTICS&quot;&gt;&lt;/a&gt;TEISROBOTICS&lt;/h2&gt;&lt;center&gt;

&lt;!-- ![](/wiki/imagenes
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>El control TEdit</title>
    <link href="https://teisrobotics.github.io/2020/01/06/controltedit/"/>
    <id>https://teisrobotics.github.io/2020/01/06/controltedit/</id>
    <published>2020-01-06T14:18:31.000Z</published>
    <updated>2020-01-06T14:18:31.611Z</updated>
    
    <content type="html"><![CDATA[<h2 id="El-control-TEdit"><a href="#El-control-TEdit" class="headerlink" title="El control TEdit"></a>El control TEdit</h2><p>Hasta ahora hemos estado practicando con un botón. En esta entrada vamos a conocer el control TEdit, que nos permitirá introducir texto.</p> <center><img src="/imagenes/lazarus4-1.png" class="" title="Aplicación con TEdit"></center><a id="more"></a><p>Lo primero es crear un nuevo proyecto del tipo <code>Aplicación</code> tal como hemos hecho en la <a href="https://www.teisrobotics.org/2019/12/24/Ventanas-en-Lazarus/" target="_blank" rel="noopener">entrada anterior</a>. Añádele un botón y el componente TEdit para que quede como la imagen anterior. El control <code>TEdit</code> lo encontrás en la pestaña <code>Standard</code>, la misma dónde esta el botón.</p> <center><img src="/imagenes/lazarus4-2.png" class="" title="TEdit"></center><p>Ahora en el evento <code>OnClick</code> del botón escribe el siguiente código:</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TForm1</span>.<span class="title">Button1Click</span><span class="params">(Sender: TObject)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  ShowMessage (edit1.text);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>Ejecuta ahora la aplicación y escribe algo dónde pone TEdit, y después pulsa el botón. Verás que aparece el un mensaje el texto que has escrito.</p> <center><img src="/imagenes/lazarus4-3.png" class="" title="Probando"></center><p>Lo que ocurre es que al pulsar el botón se muestra el texto del control TEdit. Esto se hace accediendo a su propiedad <code>Text</code>. También podemos asignar un texto a esta propiedad, escribiendo lo siguiente:</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TForm1</span>.<span class="title">Button1Click</span><span class="params">(Sender: TObject)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  Edit1.Text := <span class="string">'Ahora el texto lo cambio yo'</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h2 id="El-evento-OnChange"><a href="#El-evento-OnChange" class="headerlink" title="El evento OnChange"></a>El evento OnChange</h2><p>El control TEdit, tiene una propiedad interesante, que nos permite saber cuando el texto que se muestra es cambiado. Por ejemplo escribe el siguiente código en el evento OnChange del control TEdit.</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TForm1</span>.<span class="title">Edit1Change</span><span class="params">(Sender: TObject)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  Edit1.Text := UpperCase (Edit1.Text);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>Prueba tu aplicación y verás que todo lo que escribar siempre aparecerá en mayúsculas.</p> <center><img src="/imagenes/lazarus4-4.png" class="" title="Probando"></center><p>Lo que hace este trozo de código es leer el contenido de la propiedad <code>Text</code> del control <code>Edit1</code> y convertirla en mayúsculas, y asignarle el resultado a la propiedad <code>Text</code> de si mismo. Este evento se ejecuta cada vez que se cambia el texto en el control.</p><h2 id="El-evento-OnEditingDone"><a href="#El-evento-OnEditingDone" class="headerlink" title="El evento OnEditingDone"></a>El evento OnEditingDone</h2><p>Otra opción sería comprobar el texto que se ha introducido cuando el usuario haya terminado. Esto se puede hacer en el envento <code>OnEditingDone</code>, prueba el siguiente código.</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TForm1</span>.<span class="title">Edit1EditingDone</span><span class="params">(Sender: TObject)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    Edit1.Text := UpperCase (Edit1.Text);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>Pero antes de ejecutar, borra el contenido de los otros eventos que hemos escritos.</p><p>Hasta aquí una breve presentación del control <code>TEdit</code>. El cual es fundamental para introducir textos.</p><p>Hasta la próxima entrada.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;El-control-TEdit&quot;&gt;&lt;a href=&quot;#El-control-TEdit&quot; class=&quot;headerlink&quot; title=&quot;El control TEdit&quot;&gt;&lt;/a&gt;El control TEdit&lt;/h2&gt;&lt;p&gt;Hasta ahora hemos estado practicando con un botón. En esta entrada vamos a conocer el control TEdit, que nos permitirá introducir texto.&lt;/p&gt;
 &lt;center&gt;
&lt;img src=&quot;/imagenes/lazarus4-1.png&quot; class=&quot;&quot; title=&quot;Aplicación con TEdit&quot;&gt;
&lt;/center&gt;
    
    </summary>
    
    
      <category term="Guias" scheme="https://teisrobotics.github.io/categories/Guias/"/>
    
    
      <category term="lazarus" scheme="https://teisrobotics.github.io/tags/lazarus/"/>
    
      <category term="programacion" scheme="https://teisrobotics.github.io/tags/programacion/"/>
    
      <category term="pascal" scheme="https://teisrobotics.github.io/tags/pascal/"/>
    
  </entry>
  
  <entry>
    <title>Primeros controles</title>
    <link href="https://teisrobotics.github.io/2019/12/28/primeroscontroles/"/>
    <id>https://teisrobotics.github.io/2019/12/28/primeroscontroles/</id>
    <published>2019-12-28T13:05:19.000Z</published>
    <updated>2019-12-28T13:05:19.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Primeros-controles"><a href="#Primeros-controles" class="headerlink" title="Primeros controles"></a>Primeros controles</h2><p>En el <a href="https://www.teisrobotics.org/2019/12/24/Ventanas-en-Lazarus/" target="_blank" rel="noopener">post anterior</a> habíamos colocado un botón en nuestro formulario, y al pulsarlo “mágicamente” aparecía un mensaje en la pantalla.</p><p>Al colocar el botón u otro control en nuestro formulario veremos que este tiene una serie de propiedades y eventos.</p><a id="more"></a><p>Por propiedades se entiende “caracteristicas” del control, que podemos modificar o ajustar a nuestro gusto. Pueden ser proiedades que cambian su aspecto, o su comportamiento.</p><p>Los eventos son situaciones que ocurren en nuestro ordenador y que son nofiticados a nuestra aplicación. Por ejemplo, el evento Onclick se produce cuando se pulsa sobre un control con el botón del ratón. En ese momento el sistema operativo notifica a nuesta aplicación que se ha producido la pulsación del ratón sobre nuestro control. ¿Recuerdas este trozo de código en el post anterior?:</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TForm1</span>.<span class="title">Button1Click</span><span class="params">(Sender: TObject)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  ShowMessage (<span class="string">'Hola Mundo'</span>);</span><br><span class="line"><span class="keyword">end</span>;   </span><br></pre></td></tr></table></figure><p>Pues este es el código que recibe el evento OnClick de nuestro botón. Todo lo que está entre las palabras <code>begin</code> y <code>end;</code> se ejecutará cada vez que se pulse con el ratón sobre el botón.</p><p>Antes de seguir produndizando vamos a fijarnos en la ventana ‘Inspector de Objetos’. Recuerda que con la tecla <code>F11</code> puedes traerla al frente.</p> <center><img src="/imagenes/lazarus3-1.png" class="" title="Inspector de objetos"></center><p>Si te fijas en la parte superior, hay una estructura en árbol dónde figura el formulario <code>Form1:Tform</code> y de este depende <code>Button1:TButton</code></p> <center><img src="/imagenes/lazarus3-2.png" class="" title="Lista de objetos"></center><p>Esto nos quiere indicar que tenemos un formulario (que también es un control) y dentro de él hay un botón llamado Button1. Si seleccionamos cualquiera de los de los elementos la parte inferior de la ventana nos mostrará las propiedades y eventos de este control. Así que selecciona  <code>Button1</code> y vamos a su propiedad <code>Caption</code> dónde podrás introducir un texto, el cual será el que aparezca en el botón. Por ejemplo introduce: <code>Púlsame</code>.</p> <center><img src="/imagenes/lazarus3-3.png" class="" title="Propiedades"></center><p>También puedes ver los eventos del control, pulsando sobre la pestaña eventos. Al hacerlo verás que hay código escrito, pulsa dos veces dónde pone <code>Button1Click</code> y aparecerá el código que controla el evento <code>Onclick</code> de este control.</p> <center><img src="/imagenes/lazarus3-4.png" class="" title="Codigo OnClick"></center><p>Fíjate como está declarado el evento. Pone: <code>TForm1.Button1Click</code>, esto nos indica que el control está dentro del formulario <code>Form1</code>, se llama <code>Button1</code> y su evento es <code>Click</code>.</p><p>La verdad es que el nombre <code>Button1</code> no es muy significativo, cuando tienes muchos controles, o incluso tan solo unos pocos, saber o indentificar lo que hace cada uno de ellos, puede ser algo lioso. Por eso una buena práctica es poner un nombre a cada control, que nos indique o nos dé una referencia de cual es su función en nuestra aplicación.</p><p>Para ello vamos a darle el nombre <code>Pulsame</code> a nuestro botón. Ve a las propiedades del botón y busca una propiedad que se llama <code>Name</code>, escribe el nombre del control y pulsa enter.</p> <center><img src="/imagenes/lazarus3-5.png" class="" title="Codigo OnClick"></center><p>Ahora ve al código y verás que el nombre del evento ha cambiado, y ya no aparece Button1.</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TForm1</span>.<span class="title">PulsameClick</span><span class="params">(Sender: TObject)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  ShowMessage (<span class="string">'Hola Mundo'</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>Esto es todo por esta entrada, como ejercicio os dejo la tarea de cambiar el nombre del formulario por uno que os guste, y ver que ocurre con el código.</p><p>Hasta la próxima entrada.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Primeros-controles&quot;&gt;&lt;a href=&quot;#Primeros-controles&quot; class=&quot;headerlink&quot; title=&quot;Primeros controles&quot;&gt;&lt;/a&gt;Primeros controles&lt;/h2&gt;&lt;p&gt;En el &lt;a href=&quot;https://www.teisrobotics.org/2019/12/24/Ventanas-en-Lazarus/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;post anterior&lt;/a&gt; habíamos colocado un botón en nuestro formulario, y al pulsarlo “mágicamente” aparecía un mensaje en la pantalla.&lt;/p&gt;
&lt;p&gt;Al colocar el botón u otro control en nuestro formulario veremos que este tiene una serie de propiedades y eventos.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Guias" scheme="https://teisrobotics.github.io/categories/Guias/"/>
    
    
      <category term="lazarus" scheme="https://teisrobotics.github.io/tags/lazarus/"/>
    
      <category term="programacion" scheme="https://teisrobotics.github.io/tags/programacion/"/>
    
      <category term="pascal" scheme="https://teisrobotics.github.io/tags/pascal/"/>
    
  </entry>
  
  <entry>
    <title>Ventanas en Lazarus</title>
    <link href="https://teisrobotics.github.io/2019/12/24/Ventanas-en-Lazarus/"/>
    <id>https://teisrobotics.github.io/2019/12/24/Ventanas-en-Lazarus/</id>
    <published>2019-12-24T16:00:00.000Z</published>
    <updated>2019-12-27T12:33:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ventanas-en-Lazarus"><a href="#Ventanas-en-Lazarus" class="headerlink" title="Ventanas en Lazarus."></a>Ventanas en Lazarus.</h2><p>En el <a href="https://teisrobotics.github.io/2019/12/17/lazarus1/">post anterior</a> habíamos creado un programa para la consola o línea de comandos. En este post continuaremos haciendo una nueva versión del clásico programa <a href="ttps://es.wikipedia.org/wiki/Hola_mundo">Hola Mundo</a> pero esta vez usando ventanas.</p><a id="more"></a><p>Por <a href="https://es.wikipedia.org/wiki/Ventana_(inform%C3%A1tica)" target="_blank" rel="noopener">ventana</a> se entiende el área visual  que contiene algún tipo de <a href="https://es.wikipedia.org/wiki/Interfaz_de_usuario" target="_blank" rel="noopener">interfaz gráfica</a>, mostrando la salida de entrada de datos. dónde muestran datos las aplicaciones e interactuamos con ellas.</p><h3 id="Manos-a-la-obra"><a href="#Manos-a-la-obra" class="headerlink" title="Manos a la obra"></a>Manos a la obra</h3><p>Volvemos al menú Proyecto seleccinamos <code>Nuevo Proyecto</code>.</p><center><img src="/imagenes/lazarus1-1.png" class="" title="Menú proyecto"></center><p>Y en la ventana <code>Crear nuevo proyecto</code> esta vez seleccionamos aplicación.</p><center><img src="/imagenes/lazarus2-1.png" class="" title="Crear proyecto"></center><p>Se creara una nueva aplicación, y aparecerá un <code>Formulario</code>. Que es una representación de la ventana de nuestra aplicación cuando esté ejecutándose.</p><center><img src="/imagenes/lazarus2-2.png" class="" title="Formulario"></center><p>Si ahora echas un vistazo al editor de código fuente verás que hay más código escrito que en el programa del post pasado. Sino encuentras la ventana de código fuente, prueba a pulsar la tecla <code>F12</code>.</p><center><img src="/imagenes/lazarus2-3.png" class="" title="Editor de código fuente"></center><p>Si ejecutas el programa, verás como aparece una aplicación nueva. Algo así como esta imagen.</p><center><img src="/imagenes/lazarus2-4.png" class="" title="Programa corriendo"></center><p>Puedes mover la ventana, maximizarla, minimizarla, etc. Y cerrar la aplicación como cualquier programa que estes acostrumbrado a trabajar.</p><p>Lo que ocurre, es que Lazarus se ha encargado de crear todo el código necesario para que aparezca la ventana de tu apliación, y que responda a todas las acciones. Todo este código esta “en la trastienda”, no tienes que preocuparte por ello.</p><p>Ahora vamos a mostrar el típico mensaje “Hola Mundo”, en la parte de arriba de la ventana. El texto que aparece ahora mismo pone <code>Form1</code>, ese el título de la ventana, o <code>Caption</code> en inglés.</p><p>Para ello vamos a cambiar la propiedad <code>Caption</code>  de nuestra ventanta. Si te fijas hay un ventana que muestra todas las propiedades de la ventana, se llama <code>Inspector de objetos</code>. Sino la ves puedes pulsar <code>F11</code> para que aparezca. Busca la propiedad <code>Caption</code> y en ella escribe <code>Hola Mundo</code> y pulsa enter.</p><center><img src="/imagenes/lazarus2-5.png" class="" title="inspector de objetos"></center><p>Cuando estes listo, compila y ejecuta el programa. Recuerda que puedes hacerlo pulsando <code>F9</code>.</p><center><img src="/imagenes/lazarus2-6.png" class="" title="Hola Mundo"></center><p>Con esto ya tenemos el título de nuestra ventana con la frase <code>&quot;Hola Mundo&quot;</code>.</p><p>Ahora vamos a mostrar un mensaje. Para ellos añadiremos un botón y programaremos un <code>evento</code>. La <a href="https://es.wikipedia.org/wiki/Programaci%C3%B3n_dirigida_por_eventos" target="_blank" rel="noopener">programación por eventos</a><br> es la base de la programación de un entorno gráfico. Un evento se entiende como una situaciòn que ocurre, y que recoge el <a href="https://es.wikipedia.org/wiki/Sistema_operativo" target="_blank" rel="noopener">Sistema Operativo</a> y lo envía a nuestra aplicación. </p><p> En este caso vamos colocar un botón y “capturaremos” el evento <code>OnClick</code> que se produce cuando el usuario hace “click” con el ratón sobre el botón.</p><p> Arriba selecciona la pestaña <code>Standard</code> y pulsa sobre la imagen de un botón. Y luego pulsa sobre el formulario dónde quieras sobre el formulario.</p> <center><img src="/imagenes/lazarus2-7.png" class="" title="Botón"></center><p>Ahora pulsa dos veces sobre el botón y aparecerá el código y escribe <code>ShowMessage (&#39;Hola Mundo&#39;);</code> entre las palabras <code>begin</code> y <code>end</code> de manera que quede como el siguiente código:</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TForm1</span>.<span class="title">Button1Click</span><span class="params">(Sender: TObject)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  ShowMessage (<span class="string">'Hola Mundo'</span>);</span><br><span class="line"><span class="keyword">end</span>;   </span><br></pre></td></tr></table></figure><p>Ahora ejecuta el programa y pulsa sobre el botón. Y obtendrás un mensaje.</p> <center><img src="/imagenes/lazarus2-8.png" class="" title="Mensaje Hola Mundo"></center><p>En esta entrada hemos aprendido a modificar la propiedad <code>Caption</code> de la ventana y a colocar un botón. Además se muestra un mensaje cuando se hace <code>click</code> en él.</p><p>Por cierto, el botón también tiene la propiedad <code>Caption</code>. Como ejercicio podeis tratar de cambiar el texto de la propiedad <code>Caption</code> del botón y poner un texto que diga: “Pulsame”.</p><p>Saludos</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ventanas-en-Lazarus&quot;&gt;&lt;a href=&quot;#Ventanas-en-Lazarus&quot; class=&quot;headerlink&quot; title=&quot;Ventanas en Lazarus.&quot;&gt;&lt;/a&gt;Ventanas en Lazarus.&lt;/h2&gt;&lt;p&gt;En el &lt;a href=&quot;https://teisrobotics.github.io/2019/12/17/lazarus1/&quot;&gt;post anterior&lt;/a&gt; habíamos creado un programa para la consola o línea de comandos. En este post continuaremos haciendo una nueva versión del clásico programa &lt;a href=&quot;ttps://es.wikipedia.org/wiki/Hola_mundo&quot;&gt;Hola Mundo&lt;/a&gt; pero esta vez usando ventanas.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Guias" scheme="https://teisrobotics.github.io/categories/Guias/"/>
    
    
      <category term="lazarus" scheme="https://teisrobotics.github.io/tags/lazarus/"/>
    
      <category term="programacion" scheme="https://teisrobotics.github.io/tags/programacion/"/>
    
      <category term="pascal" scheme="https://teisrobotics.github.io/tags/pascal/"/>
    
  </entry>
  
  <entry>
    <title>Descubriendo microbit</title>
    <link href="https://teisrobotics.github.io/2019/12/24/microbit/"/>
    <id>https://teisrobotics.github.io/2019/12/24/microbit/</id>
    <published>2019-12-24T14:27:29.000Z</published>
    <updated>2019-12-29T14:30:45.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Descubriendo-Microbit"><a href="#Descubriendo-Microbit" class="headerlink" title="Descubriendo Microbit"></a>Descubriendo Microbit</h2><center><img src="/imagenes/Microbit1.png" class="" title="Microbit1"></center>BBC Micro:bit es una pequeña placa programable diseñada para hacer facil y divertida la enseñanza y el aprendizaje.<a id="more"></a><p><a href="https://microbit.org/es/" target="_blank" rel="noopener">BBC Micro:bit</a> es la sucesora espiritual de la <a href="https://es.wikipedia.org/wiki/BBC_Micro" target="_blank" rel="noopener">BBC Micro</a> de la década de 1980, que a su vez introdujo a una generación de niños a la informática.</p><p>Gracias a la gran cantidad de sensores que incorpora, sólo con la tarjeta se pueden llevar a cabo centenares de proyectos. BBC Micro:bit también es una plataforma IoT (Internet of Things), lo que la hace muy interesante para usuarios avanzados.</p><p>Y es Open Source, por supuesto. Tanto el hardware como el software de “micro:bit” es de código abierto.</p><h2 id="Caracteristicas"><a href="#Caracteristicas" class="headerlink" title="Caracteristicas"></a>Caracteristicas</h2><center><img src="/imagenes/microbit-hardware.gif" class="" title="microbit hardware"></center><p>*25 LEDs programables individualmente</p><p>*2 botones programables</p><p>*Pines de entrada y salida</p><p>*Sensor de Luz y Temperatura</p><p>*Sensores de movimiento (acelerómetro y brújula)</p><p>*Comunicación inalámbrica, vía Radio y Bluetooth</p><p>*USB y Conector para batería externa</p><h2 id="¿Como-se-programa"><a href="#¿Como-se-programa" class="headerlink" title="¿Cómo se programa?"></a>¿Cómo se programa?</h2><h3 id="Programar-con-Makecode"><a href="#Programar-con-Makecode" class="headerlink" title="Programar con Makecode"></a><a href="https://makecode.microbit.org/#lang=es" target="_blank" rel="noopener">Programar con Makecode</a></h3><center><img src="/imagenes/javascript-editor.png" class="" title=" makecode Editor"></center>El editor MakeCode proporcionado por Microsoft hace fácil programar tu micro:bit con bloques y/o JavaScript. <h3 id="Programar-con-Python"><a href="#Programar-con-Python" class="headerlink" title="Programar con Python"></a><a href="https://python.microbit.org/" target="_blank" rel="noopener">Programar con Python</a></h3><center><img src="/imagenes/python-editor.png" class="" title="microbit Python editor"></center>El editor de Python es perfecto para aquellos que quieran impulsar sus habilidades de programación aún más. Una selección de fragmentos de código y una galería de imágenes y música disponibles te ayudarán con tu código. Desarrollado por la comunidad global de Python.[Editor de Python][4]<h3 id="Otros-editores-que-puedes-usar-con-Micro-bit"><a href="#Otros-editores-que-puedes-usar-con-Micro-bit" class="headerlink" title="Otros editores que puedes usar con Micro:bit"></a><a href="https://microbit.org/es/code-alternative-editors/" target="_blank" rel="noopener">Otros editores que puedes usar con Micro:bit</a></h3><p>En nuestra proxima entrada realizaremos algun proyecto de pruebas con Micro:bit.</p><p>Saludos Jordi RC</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Descubriendo-Microbit&quot;&gt;&lt;a href=&quot;#Descubriendo-Microbit&quot; class=&quot;headerlink&quot; title=&quot;Descubriendo Microbit&quot;&gt;&lt;/a&gt;Descubriendo Microbit&lt;/h2&gt;&lt;center&gt;
&lt;img src=&quot;/imagenes/Microbit1.png&quot; class=&quot;&quot; title=&quot;Microbit1&quot;&gt;
&lt;/center&gt;
BBC Micro:bit es una pequeña placa programable diseñada para hacer facil y divertida la enseñanza y el aprendizaje.
    
    </summary>
    
    
      <category term="Guias" scheme="https://teisrobotics.github.io/categories/Guias/"/>
    
    
      <category term="programacion" scheme="https://teisrobotics.github.io/tags/programacion/"/>
    
      <category term="microbit" scheme="https://teisrobotics.github.io/tags/microbit/"/>
    
      <category term="javascript" scheme="https://teisrobotics.github.io/tags/javascript/"/>
    
      <category term="python" scheme="https://teisrobotics.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Empezando con lazarus</title>
    <link href="https://teisrobotics.github.io/2019/12/17/lazarus1/"/>
    <id>https://teisrobotics.github.io/2019/12/17/lazarus1/</id>
    <published>2019-12-17T14:27:29.000Z</published>
    <updated>2019-12-24T11:19:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Empezando-con-Lazarus"><a href="#Empezando-con-Lazarus" class="headerlink" title="Empezando con Lazarus"></a>Empezando con Lazarus</h2><center><img src="/imagenes/lazarushomepage.png" class="" title="Página principal de proyecto Lazarus"></center><p>Lazarus es un entorno de desarrollo rápido, el cual  usa el lenguaje Object Pascal para generar programas para multiples plataformas, como por ejemplo linux, Mac, windows, etc.</p><a id="more"></a><p>El lenguaje Object Pascal, es un la evolución del <a href="https://es.wikipedia.org/wiki/Pascal_(lenguaje_de_programaci%C3%B3n)" target="_blank" rel="noopener">lenguaje Pascal</a>, creado por <a href="https://es.wikipedia.org/wiki/Niklaus_Wirth" target="_blank" rel="noopener">Niklaus Wirth</a> en el año 1970.</p><p>Orginalmente el lenguaje Pascal fue creada para enseñar programación. Aunque más tarde, se hizo popular, usandose para programar aplicaciones y juegos, además de usarse en sistemas embebidos.</p><p>Su principal caracteristica es un lenguaje sencillo y claro. Además de ser un lenguaje estructurado.</p><h3 id="Instalar-lazarus"><a href="#Instalar-lazarus" class="headerlink" title="Instalar lazarus"></a>Instalar lazarus</h3><p>Lazarus está disponible para su descarga desde la <a href="https://www.lazarus-ide.org/" target="_blank" rel="noopener">página oficial.</a><br>Para ello debemos seleccionar la descarga que coincida con el sistema operativo que tengamos.</p></center><img src="/imagenes/descargalazarus.png" class="" title="Descargar lazarus"></center><h2 id="Creando-el-primer-programa"><a href="#Creando-el-primer-programa" class="headerlink" title="Creando el primer programa"></a>Creando el primer programa</h2><p>Como marca la tradición vamos a crear nuestro primer programa mostrando un mensaje en pantalla que ponga <a href="https://es.wikipedia.org/wiki/Hola_mundo" target="_blank" rel="noopener">Hola Mundo</a>. Para ello debemos crear un nuevo proyecto. Desde le menú Proyecto, seleccionamos Nuevo proyecto.</p><center><img src="/imagenes/lazarus1-1.png" class="" title="Menú proyecto"></center><p>Tras lo cual se desplegara una nueva ventana, dónde podemos elegir el tipo de aplicación que queremos hacer. Para empezar crearemos un proyecto: Programa simple.</p><center><img src="/imagenes/lazarus1-2.png" class="" title="Crear un proyecto nuevo"></center><p>Tras lo cual se abrira el editor de código, dónde podemos empezar a escribir el código de nuestro programa. </p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writeln (<span class="string">'Hola Mundo);</span></span><br></pre></td></tr></table></figure><center><img src="/imagenes/lazarus1-3.png" class="" title="Editor de código"></center><p>Para compilar y ejecutar nuestro programa puedes hacerlo pulsando la tecla <code>F9</code>. Al pulsarlo verás que Lazarus traera al frente una ventana que muestra el proceso de compilado y si todo ha ido bien se ejecutara el programa. Pero no veras nada, ya que se abrira rapidamente una ventana y se cerrara.</p><center><img src="/imagenes/lazarus1-4.png" class="" title="Ventana de mensajes"></center><p>Lo que está ocurriendo es que nuestro programa, se ejecuta y al terminar se cierra. Para evitar esto vamos a hacer que el programa se detenga y espere a que se pulse la tecla enter para continuar. Para ello modificaremos nuestro código y quedará así:</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> Project1;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  writeln (<span class="string">'Hola Mundo'</span>);</span><br><span class="line">  Readln();</span><br><span class="line"><span class="keyword">end</span>. </span><br></pre></td></tr></table></figure><p>Ahora ejecuta de nuevo el programa pulsando <code>F9</code>. Y se mostrara tu programa y no continuara hasta que se pulse la tecla enter.</p><center><img src="/imagenes/lazarus1-5.png" class="" title="Hola Mundo"></center><p>Este programa es el más sencillo que se puede hacer. Es un programa que se ejecuta en la línea  de comandos. Pero Lazarus nos permite crear tanto aplicaciones linea de comandos como para entorno gráfico.<br>En la próxima entrada crearemos un programa con entorno gráfico, o lo que viene siendo igual un programa que se muestre con el aspecto de una ventana.</p><p>Saludos</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Empezando-con-Lazarus&quot;&gt;&lt;a href=&quot;#Empezando-con-Lazarus&quot; class=&quot;headerlink&quot; title=&quot;Empezando con Lazarus&quot;&gt;&lt;/a&gt;Empezando con Lazarus&lt;/h2&gt;&lt;center&gt;
&lt;img src=&quot;/imagenes/lazarushomepage.png&quot; class=&quot;&quot; title=&quot;Página principal de proyecto Lazarus&quot;&gt;
&lt;/center&gt;

&lt;p&gt;Lazarus es un entorno de desarrollo rápido, el cual  usa el lenguaje Object Pascal para generar programas para multiples plataformas, como por ejemplo linux, Mac, windows, etc.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Guias" scheme="https://teisrobotics.github.io/categories/Guias/"/>
    
    
      <category term="lazarus" scheme="https://teisrobotics.github.io/tags/lazarus/"/>
    
      <category term="programacion" scheme="https://teisrobotics.github.io/tags/programacion/"/>
    
      <category term="pascal" scheme="https://teisrobotics.github.io/tags/pascal/"/>
    
  </entry>
  
</feed>
